PaulOS

My take on geohot's fromthetransistor operating system section (section 5)

Kernel Design: Monolithic
(C, ~2500 lines of code)

OS developed using info from [https://wiki.osdev.org/Main_Page]

Linux-ish:
* only user space threads
* open, read, write, close
* fork, execve, wait, sleep, exit
* mmap, munmap, mprotect
* Consider the debug interface you are using, ranging from printf to perhaps a gdbremote stub into kernel

HOW TO COMPILE:
$ export PATH="$HOME/opt/cross/bin:$PATH"
$ make

Clean all binary files from compilation:
$ make clean

Check if the file is valid x86 multiboot:
$ grub-file --is-x86-multiboot myos.bin && echo "OK"

Build a bootable cdrom image:
$ mkdir -p isodir/boot/grub
$ cp myos.bin isodir/boot/myos.bin
$ cp grub.cfg isodir/boot/grub/grub.cfg
$ grub-mkrescue -o myos.iso isodir

OR just ./install.sh (don't forget to chmod +x)

To run just ./run.sh

Test the operating system using QEMU:
$ qemu-system-i386 -cdrom myos.iso

For multiboot kernel (directly without bootable medium):
$ qemu-system-i386 -kernel myos.bin

STEPS:
- interrupt handlers
- process management
- shell
- paging + memory map (physical first, then paging)
- usermode -> syscalls (open, read, write, ...)
- drivers(?)
- filesystem


TODO:
* fix cmake
* finish terminal driver (meaty skeleton, going further, bare bones II)
* output to a serial port to save debugging time
* implement interrupts and syscalls and syscalls
* plan memory map (virtual and physical)
* malloc/free (mmap, munmap, mprotect)
* open, read, write, close
* fork, execve, wait, sleep, exit
* build drivers

check out:
* https://wiki.osdev.org/Getting_Started
* https://wiki.osdev.org/Bare_Bones

